{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createAssociatedTokenAccountInstruction, createInitializeAccountInstruction, createSyncNativeInstruction } from './../instructions/index.mjs';\nimport { ACCOUNT_SIZE, getAssociatedTokenAddress, getMinimumBalanceForRentExemptAccount } from './../state/index.mjs';\nimport { createAccount } from './createAccount.mjs';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n  if (!amount) return await createAccount(connection, payer, NATIVE_MINT, owner, keypair, confirmOptions, programId);\n  // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n  if (!keypair) {\n    const associatedToken = await getAssociatedTokenAddress(NATIVE_MINT, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n    const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, NATIVE_MINT, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: associatedToken,\n      lamports: amount\n    }), createSyncNativeInstruction(associatedToken, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  }\n  // Otherwise, create the account with the provided keypair and return its public key\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), SystemProgram.transfer({\n    fromPubkey: payer.publicKey,\n    toPubkey: keypair.publicKey,\n    lamports: amount\n  }), createInitializeAccountInstruction(keypair.publicKey, NATIVE_MINT, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","SystemProgram","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","NATIVE_MINT","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","createInitializeAccountInstruction","createSyncNativeInstruction","ACCOUNT_SIZE","getAssociatedTokenAddress","getMinimumBalanceForRentExemptAccount","createAccount","createWrappedNativeAccount","connection","payer","owner","amount","keypair","confirmOptions","programId","associatedToken","transaction","add","publicKey","transfer","fromPubkey","toPubkey","lamports","newAccountPubkey","space"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/createWrappedNativeAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    createAssociatedTokenAccountInstruction,\n    createInitializeAccountInstruction,\n    createSyncNativeInstruction,\n} from '../instructions/index';\nimport { ACCOUNT_SIZE, getAssociatedTokenAddress, getMinimumBalanceForRentExemptAccount } from '../state/index';\nimport { createAccount } from './createAccount';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, NATIVE_MINT, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = await getAssociatedTokenAddress(\n            NATIVE_MINT,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                NATIVE_MINT,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, NATIVE_MINT, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AAAA,SAKIA,yBAAyB,EAEzBC,aAAa,EACbC,WAAW,QACR,iBAAiB;AACxB,SAASC,2BAA2B,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,oBAAe;AAC1F,SACIC,uCAAuC,EACvCC,kCAAkC,EAClCC,2BAA2B,QACxB,6BAAwB;AAC/B,SAASC,YAAY,EAAEC,yBAAyB,EAAEC,qCAAqC,QAAQ,sBAAiB;AAChH,SAASC,aAAa,QAAQ,qBAAkB;AAEhD;;;;;;;;;;;;;AAaA,OAAO,eAAeC,0BAA0BA,CAC5CC,UAAsB,EACtBC,KAAa,EACbC,KAAgB,EAChBC,MAAc,EACdC,OAAiB,EACjBC,cAA+B,EAC/BC,SAAS,GAAGf,gBAAgB;EAE5B;EACA,IAAI,CAACY,MAAM,EAAE,OAAO,MAAML,aAAa,CAACE,UAAU,EAAEC,KAAK,EAAEX,WAAW,EAAEY,KAAK,EAAEE,OAAO,EAAEC,cAAc,EAAEC,SAAS,CAAC;EAElH;EACA,IAAI,CAACF,OAAO,EAAE;IACV,MAAMG,eAAe,GAAG,MAAMX,yBAAyB,CACnDN,WAAW,EACXY,KAAK,EACL,KAAK,EACLI,SAAS,EACTjB,2BAA2B,CAC9B;IAED,MAAMmB,WAAW,GAAG,IAAIpB,WAAW,EAAE,CAACqB,GAAG,CACrCjB,uCAAuC,CACnCS,KAAK,CAACS,SAAS,EACfH,eAAe,EACfL,KAAK,EACLZ,WAAW,EACXgB,SAAS,EACTjB,2BAA2B,CAC9B,EACDF,aAAa,CAACwB,QAAQ,CAAC;MACnBC,UAAU,EAAEX,KAAK,CAACS,SAAS;MAC3BG,QAAQ,EAAEN,eAAe;MACzBO,QAAQ,EAAEX;KACb,CAAC,EACFT,2BAA2B,CAACa,eAAe,EAAED,SAAS,CAAC,CAC1D;IAED,MAAMpB,yBAAyB,CAACc,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAEI,cAAc,CAAC;IAEjF,OAAOE,eAAe;;EAG1B;EACA,MAAMO,QAAQ,GAAG,MAAMjB,qCAAqC,CAACG,UAAU,CAAC;EAExE,MAAMQ,WAAW,GAAG,IAAIpB,WAAW,EAAE,CAACqB,GAAG,CACrCtB,aAAa,CAACW,aAAa,CAAC;IACxBc,UAAU,EAAEX,KAAK,CAACS,SAAS;IAC3BK,gBAAgB,EAAEX,OAAO,CAACM,SAAS;IACnCM,KAAK,EAAErB,YAAY;IACnBmB,QAAQ;IACRR;GACH,CAAC,EACFnB,aAAa,CAACwB,QAAQ,CAAC;IACnBC,UAAU,EAAEX,KAAK,CAACS,SAAS;IAC3BG,QAAQ,EAAET,OAAO,CAACM,SAAS;IAC3BI,QAAQ,EAAEX;GACb,CAAC,EACFV,kCAAkC,CAACW,OAAO,CAACM,SAAS,EAAEpB,WAAW,EAAEY,KAAK,EAAEI,SAAS,CAAC,CACvF;EAED,MAAMpB,yBAAyB,CAACc,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;EAE1F,OAAOD,OAAO,CAACM,SAAS;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}