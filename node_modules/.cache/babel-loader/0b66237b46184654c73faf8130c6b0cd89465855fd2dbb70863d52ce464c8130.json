{"ast":null,"code":"var _jsxFileName = \"/home/spkn/spkn1/token5/src/MintToken.js\";\nimport { clusterApiUrl, Connection, PublicKey, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer, Account, getMint, getAccount } from '@solana/spl-token';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MintToken() {\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n  // Generate a new wallet keypair and airdrop SOL\n  const fromWallet = Keypair.generate();\n  async function createToken() {\n    const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n    await connection.confirmTransaction(fromAirdropSignature);\n\n    // Create new token mint\n    mint = await createMint(connection, fromWallet, fromWallet.publicKey, null\n    // 9 here means we have a decmial of 9 0's\n    );\n    console.log(`Create token: ${mint.toBase58()}`);\n\n    // Get the token account of the fromWallet address, and if it does not exist, create it\n    fromTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, fromWallet.publicKey);\n    console.log(`Create Token Account: ${fromTokenAccount.address.toBase58()}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Mint Token Section\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Mint Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Check Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_c = MintToken;\nexport default MintToken;\nvar _c;\n$RefreshReg$(_c, \"MintToken\");","map":{"version":3,"names":["clusterApiUrl","Connection","PublicKey","Keypair","LAMPORTS_PER_SOL","createMint","getOrCreateAssociatedTokenAccount","mintTo","transfer","Account","getMint","getAccount","jsxDEV","_jsxDEV","MintToken","connection","fromWallet","generate","createToken","fromAirdropSignature","requestAirdrop","publicKey","confirmTransaction","mint","console","log","toBase58","fromTokenAccount","address","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/spkn/spkn1/token5/src/MintToken.js"],"sourcesContent":["import { \n  clusterApiUrl, \n  Connection, \n  PublicKey, \n  Keypair, \n  LAMPORTS_PER_SOL \n} from '@solana/web3.js';\nimport { \n  createMint, \n  getOrCreateAssociatedTokenAccount, \n  mintTo, \n  transfer, \n  Account, \n  getMint, \n  getAccount\n} from '@solana/spl-token';\n\nfunction MintToken() {\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n    // Generate a new wallet keypair and airdrop SOL\n    const fromWallet = Keypair.generate();\n\n    async function createToken() {\n      const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n      await connection.confirmTransaction(fromAirdropSignature);\n  \n      // Create new token mint\n      mint = await createMint(\n          connection, \n          fromWallet, \n          fromWallet.publicKey, \n          null, \n           // 9 here means we have a decmial of 9 0's\n      );\n      console.log(`Create token: ${mint.toBase58()}`);\n  \n      // Get the token account of the fromWallet address, and if it does not exist, create it\n      fromTokenAccount = await getOrCreateAssociatedTokenAccount(\n          connection,\n          fromWallet,\n          mint,\n          fromWallet.publicKey\n      );\n      console.log(`Create Token Account: ${fromTokenAccount.address.toBase58()}`);\n  }\n\n\n\n\n  return (\n    <div >\n      Mint Token Section\n      <div>\n     <button>Create Token</button>\n     <button>Mint Token</button>\n     <button>Check Balance</button>   \n     <button>Send Token</button>\n     </div>\n    </div>\n  );\n}\n\nexport default  MintToken;\n"],"mappings":";AAAA,SACEA,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,OAAO,EACPC,gBAAgB,QACX,iBAAiB;AACxB,SACEC,UAAU,EACVC,iCAAiC,EACjCC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,OAAO,EACPC,UAAU,QACL,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,SAASA,CAAA,EAAG;EACnB,MAAMC,UAAU,GAAG,IAAId,UAAU,CAACD,aAAa,CAAC,QAAQ,CAAC,EAAE,WAAW,CAAC;EACrE;EACA,MAAMgB,UAAU,GAAGb,OAAO,CAACc,QAAQ,CAAC,CAAC;EAErC,eAAeC,WAAWA,CAAA,EAAG;IAC3B,MAAMC,oBAAoB,GAAG,MAAMJ,UAAU,CAACK,cAAc,CAACJ,UAAU,CAACK,SAAS,EAAEjB,gBAAgB,CAAC;IACpG,MAAMW,UAAU,CAACO,kBAAkB,CAACH,oBAAoB,CAAC;;IAEzD;IACAI,IAAI,GAAG,MAAMlB,UAAU,CACnBU,UAAU,EACVC,UAAU,EACVA,UAAU,CAACK,SAAS,EACpB;IACC;IACL,CAAC;IACDG,OAAO,CAACC,GAAG,CAAE,iBAAgBF,IAAI,CAACG,QAAQ,CAAC,CAAE,EAAC,CAAC;;IAE/C;IACAC,gBAAgB,GAAG,MAAMrB,iCAAiC,CACtDS,UAAU,EACVC,UAAU,EACVO,IAAI,EACJP,UAAU,CAACK,SACf,CAAC;IACDG,OAAO,CAACC,GAAG,CAAE,yBAAwBE,gBAAgB,CAACC,OAAO,CAACF,QAAQ,CAAC,CAAE,EAAC,CAAC;EAC/E;EAKA,oBACEb,OAAA;IAAAgB,QAAA,GAAM,oBAEJ,eAAAhB,OAAA;MAAAgB,QAAA,gBACDhB,OAAA;QAAAgB,QAAA,EAAQ;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7BpB,OAAA;QAAAgB,QAAA,EAAQ;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3BpB,OAAA;QAAAgB,QAAA,EAAQ;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9BpB,OAAA;QAAAgB,QAAA,EAAQ;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACC,EAAA,GA3CQpB,SAAS;AA6ClB,eAAgBA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}