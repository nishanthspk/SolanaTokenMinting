{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createInitializeMintInstruction } from './../instructions/index.mjs';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from './../state/index.mjs';\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(connection, payer, mintAuthority, freezeAuthority, decimals, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const lamports = await getMinimumBalanceForRentExemptMint(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MINT_SIZE,\n    lamports,\n    programId\n  }), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMintInstruction","getMinimumBalanceForRentExemptMint","MINT_SIZE","createMint","connection","payer","mintAuthority","freezeAuthority","decimals","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/createMint.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeMintInstruction } from '../instructions/index';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/index';\n\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AAAA,SAGIA,OAAO,EAEPC,yBAAyB,EAEzBC,aAAa,EACbC,WAAW,QACR,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,+BAA+B,QAAQ,6BAAwB;AACxE,SAASC,kCAAkC,EAAEC,SAAS,QAAQ,sBAAiB;AAE/E;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,UAAUA,CAC5BC,UAAsB,EACtBC,KAAa,EACbC,aAAwB,EACxBC,eAAiC,EACjCC,QAAgB,EAChBC,OAAO,GAAGd,OAAO,CAACe,QAAQ,EAAE,EAC5BC,cAA+B,EAC/BC,SAAS,GAAGb,gBAAgB;EAE5B,MAAMc,QAAQ,GAAG,MAAMZ,kCAAkC,CAACG,UAAU,CAAC;EAErE,MAAMU,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrClB,aAAa,CAACmB,aAAa,CAAC;IACxBC,UAAU,EAAEZ,KAAK,CAACa,SAAS;IAC3BC,gBAAgB,EAAEV,OAAO,CAACS,SAAS;IACnCE,KAAK,EAAElB,SAAS;IAChBW,QAAQ;IACRD;GACH,CAAC,EACFZ,+BAA+B,CAACS,OAAO,CAACS,SAAS,EAAEV,QAAQ,EAAEF,aAAa,EAAEC,eAAe,EAAEK,SAAS,CAAC,CAC1G;EAED,MAAMhB,yBAAyB,CAACQ,UAAU,EAAEU,WAAW,EAAE,CAACT,KAAK,EAAEI,OAAO,CAAC,EAAEE,cAAc,CAAC;EAE1F,OAAOF,OAAO,CAACS,SAAS;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}