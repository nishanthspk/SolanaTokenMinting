{"ast":null,"code":"import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from './../errors.mjs';\n/** Token account state as stored by the program */\nexport var AccountState;\n(function (AccountState) {\n  AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n  AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState || (AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct([publicKey('mint'), publicKey('owner'), u64('amount'), u32('delegateOption'), publicKey('delegate'), u8('state'), u32('isNativeOption'), u64('isNative'), u64('delegatedAmount'), u32('closeAuthorityOption'), publicKey('closeAuthority')]);\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n  const info = await connection.getAccountInfo(address, commitment);\n  if (!info) throw new TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n  if (info.data.length != ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n  const rawAccount = AccountLayout.decode(info.data);\n  return {\n    address,\n    mint: rawAccount.mint,\n    owner: rawAccount.owner,\n    amount: rawAccount.amount,\n    delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n    delegatedAmount: rawAccount.delegatedAmount,\n    isInitialized: rawAccount.state !== AccountState.Uninitialized,\n    isFrozen: rawAccount.state === AccountState.Frozen,\n    isNative: !!rawAccount.isNativeOption,\n    rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n    closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null\n  };\n}\n/** Get the minimum lamport balance for a token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(connection, commitment) {\n  return await connection.getMinimumBalanceForRentExemption(ACCOUNT_SIZE, commitment);\n}","map":{"version":3,"names":["struct","u32","u8","publicKey","u64","TOKEN_PROGRAM_ID","TokenAccountNotFoundError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","AccountState","AccountLayout","ACCOUNT_SIZE","span","getAccount","connection","address","commitment","programId","info","getAccountInfo","owner","equals","data","length","rawAccount","decode","mint","amount","delegate","delegateOption","delegatedAmount","isInitialized","state","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","rentExemptReserve","closeAuthority","closeAuthorityOption","getMinimumBalanceForRentExemptAccount","getMinimumBalanceForRentExemption"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/state/account.ts"],"sourcesContent":["import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data);\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n    };\n}\n\n/** Get the minimum lamport balance for a token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(ACCOUNT_SIZE, commitment);\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,GAAG,EAAEC,EAAE,QAAQ,uBAAuB;AACvD,SAASC,SAAS,EAAEC,GAAG,QAAQ,6BAA6B;AAE5D,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,yBAAyB,EAAEC,6BAA6B,EAAEC,4BAA4B,QAAQ,iBAAY;AA+BnH;AACA,WAAYC,YAIX;AAJD,WAAYA,YAAY;EACpBA,YAAA,CAAAA,YAAA,wCAAiB;EACjBA,YAAA,CAAAA,YAAA,oCAAe;EACfA,YAAA,CAAAA,YAAA,0BAAU;AACd,CAAC,EAJWA,YAAY,KAAZA,YAAY;AAqBxB;AACA,OAAO,MAAMC,aAAa,GAAGV,MAAM,CAAa,CAC5CG,SAAS,CAAC,MAAM,CAAC,EACjBA,SAAS,CAAC,OAAO,CAAC,EAClBC,GAAG,CAAC,QAAQ,CAAC,EACbH,GAAG,CAAC,gBAAgB,CAAC,EACrBE,SAAS,CAAC,UAAU,CAAC,EACrBD,EAAE,CAAC,OAAO,CAAC,EACXD,GAAG,CAAC,gBAAgB,CAAC,EACrBG,GAAG,CAAC,UAAU,CAAC,EACfA,GAAG,CAAC,iBAAiB,CAAC,EACtBH,GAAG,CAAC,sBAAsB,CAAC,EAC3BE,SAAS,CAAC,gBAAgB,CAAC,CAC9B,CAAC;AAEF;AACA,OAAO,MAAMQ,YAAY,GAAGD,aAAa,CAACE,IAAI;AAE9C;;;;;;;;;;AAUA,OAAO,eAAeC,UAAUA,CAC5BC,UAAsB,EACtBC,OAAkB,EAClBC,UAAuB,EACvBC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAMa,IAAI,GAAG,MAAMJ,UAAU,CAACK,cAAc,CAACJ,OAAO,EAAEC,UAAU,CAAC;EACjE,IAAI,CAACE,IAAI,EAAE,MAAM,IAAIZ,yBAAyB,EAAE;EAChD,IAAI,CAACY,IAAI,CAACE,KAAK,CAACC,MAAM,CAACJ,SAAS,CAAC,EAAE,MAAM,IAAIV,6BAA6B,EAAE;EAC5E,IAAIW,IAAI,CAACI,IAAI,CAACC,MAAM,IAAIZ,YAAY,EAAE,MAAM,IAAIH,4BAA4B,EAAE;EAE9E,MAAMgB,UAAU,GAAGd,aAAa,CAACe,MAAM,CAACP,IAAI,CAACI,IAAI,CAAC;EAElD,OAAO;IACHP,OAAO;IACPW,IAAI,EAAEF,UAAU,CAACE,IAAI;IACrBN,KAAK,EAAEI,UAAU,CAACJ,KAAK;IACvBO,MAAM,EAAEH,UAAU,CAACG,MAAM;IACzBC,QAAQ,EAAEJ,UAAU,CAACK,cAAc,GAAGL,UAAU,CAACI,QAAQ,GAAG,IAAI;IAChEE,eAAe,EAAEN,UAAU,CAACM,eAAe;IAC3CC,aAAa,EAAEP,UAAU,CAACQ,KAAK,KAAKvB,YAAY,CAACwB,aAAa;IAC9DC,QAAQ,EAAEV,UAAU,CAACQ,KAAK,KAAKvB,YAAY,CAAC0B,MAAM;IAClDC,QAAQ,EAAE,CAAC,CAACZ,UAAU,CAACa,cAAc;IACrCC,iBAAiB,EAAEd,UAAU,CAACa,cAAc,GAAGb,UAAU,CAACY,QAAQ,GAAG,IAAI;IACzEG,cAAc,EAAEf,UAAU,CAACgB,oBAAoB,GAAGhB,UAAU,CAACe,cAAc,GAAG;GACjF;AACL;AAEA;;;;;;;AAOA,OAAO,eAAeE,qCAAqCA,CACvD3B,UAAsB,EACtBE,UAAuB;EAEvB,OAAO,MAAMF,UAAU,CAAC4B,iCAAiC,CAAC/B,YAAY,EAAEK,UAAU,CAAC;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}