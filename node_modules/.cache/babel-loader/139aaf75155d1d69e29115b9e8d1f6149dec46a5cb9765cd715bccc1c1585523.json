{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createSetAuthorityInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(connection, payer, account, currentAuthority, authorityType, newAuthority, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n  const transaction = new Transaction().add(createSetAuthorityInstruction(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createSetAuthorityInstruction","getSigners","setAuthority","connection","payer","account","currentAuthority","authorityType","newAuthority","multiSigners","confirmOptions","programId","currentAuthorityPublicKey","signers","transaction","add"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/setAuthority.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { AuthorityType, createSetAuthorityInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    currentAuthority: Signer | PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createSetAuthorityInstruction(\n            account,\n            currentAuthorityPublicKey,\n            authorityType,\n            newAuthority,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AAAA,SAIIA,yBAAyB,EAEzBC,WAAW,QAER,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAAwBC,6BAA6B,QAAQ,6BAAwB;AACrF,SAASC,UAAU,QAAQ,gBAAa;AAExC;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,YAAYA,CAC9BC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,gBAAoC,EACpCC,aAA4B,EAC5BC,YAA8B,EAC9BC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAM,CAACa,yBAAyB,EAAEC,OAAO,CAAC,GAAGZ,UAAU,CAACK,gBAAgB,EAAEG,YAAY,CAAC;EAEvF,MAAMK,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrCf,6BAA6B,CACzBK,OAAO,EACPO,yBAAyB,EACzBL,aAAa,EACbC,YAAY,EACZC,YAAY,EACZE,SAAS,CACZ,CACJ;EAED,OAAO,MAAMd,yBAAyB,CAACM,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,EAAE,GAAGS,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}