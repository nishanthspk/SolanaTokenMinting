{"ast":null,"code":"var _jsxFileName = \"/home/spkn/spkn1/token5/src/MintToken.js\";\nimport React from 'react';\nimport { clusterApiUrl, Connection, PublicKey, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer, getMint, getAccount, Account } from '@solana/spl-token';\n\n// Special setup to add a Buffer class, because it's missing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.Buffer = window.Buffer || require(\"buffer\").Buffer;\nfunction MintToken() {\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n  const fromWallet = Keypair.generate();\n  const toWallet = new PublicKey(\"INSERT YOUR PUBLIC KEY HERE\");\n  let fromTokenAccount = new Account();\n  let mint = new PublicKey();\n  async function createToken() {\n    const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n    await connection.confirmTransaction(fromAirdropSignature);\n    mint = await createMint(connection, fromWallet, fromWallet.publicKey, null, 9);\n    console.log(`Create token: ${mint.toBase58()}`);\n    fromTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, fromWallet.publicKey);\n    console.log(`Create Token Account: ${fromTokenAccount.publicKey.toBase58()}`);\n  }\n  async function mintToken() {\n    const signature = await mintTo(connection, fromWallet, mint, fromTokenAccount.publicKey, fromWallet.publicKey, 10000000000);\n    console.log(`Mint signature: ${signature}`);\n  }\n  async function checkBalance() {\n    const mintInfo = await getMint(connection, mint);\n    console.log(mintInfo.supply);\n    const tokenAccountInfo = await getAccount(connection, fromTokenAccount.publicKey);\n    console.log(tokenAccountInfo.amount);\n  }\n  async function sendToken() {\n    const toTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, toWallet);\n    console.log(`toTokenAccount ${toTokenAccount.address}`);\n    const signature = await transfer(connection, fromWallet, fromTokenAccount.publicKey, toTokenAccount.address, fromWallet.publicKey, 1000000000);\n    console.log(`finished transfer with ${signature}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Mint Token Section\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createToken,\n        children: \"Create token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mintToken,\n        children: \"Mint token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkBalance,\n        children: \"Check balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendToken,\n        children: \"Send token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_c = MintToken;\nexport default MintToken;\nvar _c;\n$RefreshReg$(_c, \"MintToken\");","map":{"version":3,"names":["React","clusterApiUrl","Connection","PublicKey","Keypair","LAMPORTS_PER_SOL","createMint","getOrCreateAssociatedTokenAccount","mintTo","transfer","getMint","getAccount","Account","jsxDEV","_jsxDEV","window","Buffer","require","MintToken","connection","fromWallet","generate","toWallet","fromTokenAccount","mint","createToken","fromAirdropSignature","requestAirdrop","publicKey","confirmTransaction","console","log","toBase58","mintToken","signature","checkBalance","mintInfo","supply","tokenAccountInfo","amount","sendToken","toTokenAccount","address","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/spkn/spkn1/token5/src/MintToken.js"],"sourcesContent":["import React from 'react';\nimport {\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n  Keypair,\n  LAMPORTS_PER_SOL\n} from '@solana/web3.js';\nimport {\n  createMint,\n  getOrCreateAssociatedTokenAccount,\n  mintTo,\n  transfer,\n  getMint,\n  getAccount,\n  Account\n} from '@solana/spl-token';\n\n// Special setup to add a Buffer class, because it's missing\nwindow.Buffer = window.Buffer || require(\"buffer\").Buffer;\n\nfunction MintToken() {\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n  const fromWallet = Keypair.generate();\n  const toWallet = new PublicKey(\"INSERT YOUR PUBLIC KEY HERE\");\n  let fromTokenAccount = new Account();\n  let mint = new PublicKey();\n\n  async function createToken() {\n    const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n    await connection.confirmTransaction(fromAirdropSignature);\n\n    mint = await createMint(\n      connection,\n      fromWallet,\n      fromWallet.publicKey,\n      null,\n      9\n    );\n    console.log(`Create token: ${mint.toBase58()}`);\n\n    fromTokenAccount = await getOrCreateAssociatedTokenAccount(\n      connection,\n      fromWallet,\n      mint,\n      fromWallet.publicKey\n    );\n    console.log(`Create Token Account: ${fromTokenAccount.publicKey.toBase58()}`);\n  }\n\n  async function mintToken() {\n    const signature = await mintTo(\n      connection,\n      fromWallet,\n      mint,\n      fromTokenAccount.publicKey,\n      fromWallet.publicKey,\n      10000000000\n    );\n    console.log(`Mint signature: ${signature}`);\n  }\n\n  async function checkBalance() {\n    const mintInfo = await getMint(connection, mint);\n    console.log(mintInfo.supply);\n\n    const tokenAccountInfo = await getAccount(connection, fromTokenAccount.publicKey);\n    console.log(tokenAccountInfo.amount);\n  }\n\n  async function sendToken() {\n    const toTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, toWallet);\n    console.log(`toTokenAccount ${toTokenAccount.address}`);\n\n    const signature = await transfer(\n      connection,\n      fromWallet,\n      fromTokenAccount.publicKey,\n      toTokenAccount.address,\n      fromWallet.publicKey,\n      1000000000\n    );\n    console.log(`finished transfer with ${signature}`);\n  }\n\n  return (\n    <div>\n      Mint Token Section\n      <div>\n        <button onClick={createToken}>Create token</button>\n        <button onClick={mintToken}>Mint token</button>\n        <button onClick={checkBalance}>Check balance</button>\n        <button onClick={sendToken}>Send token</button>\n      </div>\n    </div>\n  );\n}\n\nexport default MintToken;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}