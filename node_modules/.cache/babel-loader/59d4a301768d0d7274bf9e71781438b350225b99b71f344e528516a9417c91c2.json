{"ast":null,"code":"var _jsxFileName = \"/home/spkn/spkn1/token5/src/MintToken.js\";\nimport { clusterApiUrl, Connection, PublicKey, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer, Account, getMint, getAccount } from '@solana/spl-token';\n\n// Special setup to add a Buffer class, because it's missing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.Buffer = window.Buffer || require(\"buffer\").Buffer;\nfunction MintToken() {\n  const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n  // Generate a new wallet keypair and airdrop SOL\n  const fromWallet = Keypair.generate();\n  // Public Key to your Phantom Wallet\n  const toWallet = new PublicKey(\"INSERT YOUR PUBLIC KEY HERE\");\n  let fromTokenAccount;\n  let mint;\n  async function createToken() {\n    const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n    await connection.confirmTransaction(fromAirdropSignature);\n\n    // Create new token mint\n    mint = await createMint(connection, fromWallet, fromWallet.publicKey, null, 9 // 9 here means we have a decmial of 9 0's\n    );\n    console.log(`Create token: ${mint.toBase58()}`);\n\n    // Get the token account of the fromWallet address, and if it does not exist, create it\n    fromTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, fromWallet.publicKey);\n    console.log(`Create Token Account: ${fromTokenAccount.address.toBase58()}`);\n  }\n  async function mintToken() {\n    // Mint 1 new token to the \"fromTokenAccount\" account we just created\n    const signature = await mintTo(connection, fromWallet, mint, fromTokenAccount.address, fromWallet.publicKey, 10000000000 // 10 billion\n    );\n    console.log(`Mint signature: ${signature}`);\n  }\n  async function checkBalance() {\n    // get the supply of tokens we have minted into existance\n    const mintInfo = await getMint(connection, mint);\n    console.log(mintInfo.supply);\n\n    // get the amount of tokens left in the account\n    const tokenAccountInfo = await getAccount(connection, fromTokenAccount.address);\n    console.log(tokenAccountInfo.amount);\n  }\n  async function sendToken() {\n    // Get the token account of the toWallet address, and if it does not exist, create it\n    const toTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, toWallet);\n    console.log(`toTokenAccount ${toTokenAccount.address}`);\n    const signature = await transfer(connection, fromWallet, fromTokenAccount.address, toTokenAccount.address, fromWallet.publicKey, 1000000000 // 1 billion\n    );\n    console.log(`finished transfer with ${signature}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Mint Token Section\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createToken,\n        children: \"Create token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mintToken,\n        children: \"Mint token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkBalance,\n        children: \"Check balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendToken,\n        children: \"Send token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_c = MintToken;\nexport default MintToken;\nvar _c;\n$RefreshReg$(_c, \"MintToken\");","map":{"version":3,"names":["clusterApiUrl","Connection","PublicKey","Keypair","LAMPORTS_PER_SOL","createMint","getOrCreateAssociatedTokenAccount","mintTo","transfer","Account","getMint","getAccount","jsxDEV","_jsxDEV","window","Buffer","require","MintToken","connection","fromWallet","generate","toWallet","fromTokenAccount","mint","createToken","fromAirdropSignature","requestAirdrop","publicKey","confirmTransaction","console","log","toBase58","address","mintToken","signature","checkBalance","mintInfo","supply","tokenAccountInfo","amount","sendToken","toTokenAccount","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/spkn/spkn1/token5/src/MintToken.js"],"sourcesContent":["import { \n    clusterApiUrl, \n    Connection, \n    PublicKey, \n    Keypair, \n    LAMPORTS_PER_SOL \n} from '@solana/web3.js';\nimport { \n    createMint, \n    getOrCreateAssociatedTokenAccount, \n    mintTo, \n    transfer, \n    Account, \n    getMint, \n    getAccount\n} from '@solana/spl-token';\n\n// Special setup to add a Buffer class, because it's missing\nwindow.Buffer = window.Buffer || require(\"buffer\").Buffer;\n\nfunction MintToken() {\n    const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');\n    // Generate a new wallet keypair and airdrop SOL\n    const fromWallet = Keypair.generate();\n    // Public Key to your Phantom Wallet\n    const toWallet = new PublicKey(\"INSERT YOUR PUBLIC KEY HERE\");\n\tlet fromTokenAccount: Account; \n\tlet mint: PublicKey;\n\n    async function createToken() {\n        const fromAirdropSignature = await connection.requestAirdrop(fromWallet.publicKey, LAMPORTS_PER_SOL);\n        await connection.confirmTransaction(fromAirdropSignature);\n    \n        // Create new token mint\n        mint = await createMint(\n            connection, \n            fromWallet, \n            fromWallet.publicKey, \n            null, \n            9 // 9 here means we have a decmial of 9 0's\n        );\n        console.log(`Create token: ${mint.toBase58()}`);\n    \n        // Get the token account of the fromWallet address, and if it does not exist, create it\n        fromTokenAccount = await getOrCreateAssociatedTokenAccount(\n            connection,\n            fromWallet,\n            mint,\n            fromWallet.publicKey\n        );\n        console.log(`Create Token Account: ${fromTokenAccount.address.toBase58()}`);\n    }\n\n    async function mintToken() {      \n        // Mint 1 new token to the \"fromTokenAccount\" account we just created\n        const signature = await mintTo(\n            connection,\n            fromWallet,\n            mint,\n            fromTokenAccount.address,\n            fromWallet.publicKey,\n            10000000000 // 10 billion\n        );\n        console.log(`Mint signature: ${signature}`);\n    }\n\n    async function checkBalance() {\n        // get the supply of tokens we have minted into existance\n        const mintInfo = await getMint(connection, mint);\n\t\tconsole.log(mintInfo.supply);\n\t\t\n\t\t// get the amount of tokens left in the account\n        const tokenAccountInfo = await getAccount(connection, fromTokenAccount.address);\n\t\tconsole.log(tokenAccountInfo.amount);\n    }\n\n    async function sendToken() {\n        // Get the token account of the toWallet address, and if it does not exist, create it\n        const toTokenAccount = await getOrCreateAssociatedTokenAccount(connection, fromWallet, mint, toWallet);\n        console.log(`toTokenAccount ${toTokenAccount.address}`);\n\n        const signature = await transfer(\n            connection,\n            fromWallet,\n            fromTokenAccount.address,\n            toTokenAccount.address,\n            fromWallet.publicKey,\n            1000000000 // 1 billion\n        );\n        console.log(`finished transfer with ${signature}`);\n    }\n    \n    return (\n        <div>\n            Mint Token Section\n            <div>\n                <button onClick={createToken}>Create token</button>\n                <button onClick={mintToken}>Mint token</button>\n                <button onClick={checkBalance}>Check balance</button>\n                <button onClick={sendToken}>Send token</button>\n            </div>\n        </div>\n    );\n}\n\nexport default MintToken;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}