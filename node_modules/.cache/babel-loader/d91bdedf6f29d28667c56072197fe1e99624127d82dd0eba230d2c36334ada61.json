{"ast":null,"code":"/** Base class for errors */\nexport class TokenError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenAccountNotFoundError';\n  }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountOwnerError';\n  }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountSizeError';\n  }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidMintError';\n  }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidOwnerError';\n  }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenOwnerOffCurveError';\n  }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionProgramError';\n  }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionKeysError';\n  }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionDataError';\n  }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionTypeError';\n  }\n}","map":{"version":3,"names":["TokenError","Error","constructor","message","TokenAccountNotFoundError","name","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenInvalidOwnerError","TokenOwnerOffCurveError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/errors.ts"],"sourcesContent":["/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n"],"mappings":"AAAA;AACA,OAAM,MAAgBA,UAAW,SAAQC,KAAK;EAC1CC,YAAYC,OAAgB;IACxB,KAAK,CAACA,OAAO,CAAC;EAClB;;AAGJ;AACA,OAAM,MAAOC,yBAA0B,SAAQJ,UAAU;EAAzDE,YAAA;;IACI,KAAAG,IAAI,GAAG,2BAA2B;EACtC;;AAEA;AACA,OAAM,MAAOC,6BAA8B,SAAQN,UAAU;EAA7DE,YAAA;;IACI,KAAAG,IAAI,GAAG,+BAA+B;EAC1C;;AAEA;AACA,OAAM,MAAOE,4BAA6B,SAAQP,UAAU;EAA5DE,YAAA;;IACI,KAAAG,IAAI,GAAG,8BAA8B;EACzC;;AAEA;AACA,OAAM,MAAOG,qBAAsB,SAAQR,UAAU;EAArDE,YAAA;;IACI,KAAAG,IAAI,GAAG,uBAAuB;EAClC;;AAEA;AACA,OAAM,MAAOI,sBAAuB,SAAQT,UAAU;EAAtDE,YAAA;;IACI,KAAAG,IAAI,GAAG,wBAAwB;EACnC;;AAEA;AACA,OAAM,MAAOK,uBAAwB,SAAQV,UAAU;EAAvDE,YAAA;;IACI,KAAAG,IAAI,GAAG,yBAAyB;EACpC;;AAEA;AACA,OAAM,MAAOM,mCAAoC,SAAQX,UAAU;EAAnEE,YAAA;;IACI,KAAAG,IAAI,GAAG,qCAAqC;EAChD;;AAEA;AACA,OAAM,MAAOO,gCAAiC,SAAQZ,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOQ,gCAAiC,SAAQb,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C;;AAEA;AACA,OAAM,MAAOS,gCAAiC,SAAQd,UAAU;EAAhEE,YAAA;;IACI,KAAAG,IAAI,GAAG,kCAAkC;EAC7C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}