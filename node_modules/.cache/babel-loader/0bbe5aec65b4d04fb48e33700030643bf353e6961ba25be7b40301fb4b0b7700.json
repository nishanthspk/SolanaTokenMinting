{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createCloseAccountInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Close a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to close\n * @param destination    Account to receive the remaining balance of the closed account\n * @param authority      Authority which is allowed to close the account\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function closeAccount(connection, payer, account, destination, authority, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createCloseAccountInstruction(account, destination, authorityPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createCloseAccountInstruction","getSigners","closeAccount","connection","payer","account","destination","authority","multiSigners","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/closeAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createCloseAccountInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Close a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to close\n * @param destination    Account to receive the remaining balance of the closed account\n * @param authority      Authority which is allowed to close the account\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function closeAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createCloseAccountInstruction(account, destination, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AAAA,SAIIA,yBAAyB,EAEzBC,WAAW,QAER,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,6BAA6B,QAAQ,6BAAwB;AACtE,SAASC,UAAU,QAAQ,gBAAa;AAExC;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,YAAYA,CAC9BC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,WAAsB,EACtBC,SAA6B,EAC7BC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGX,gBAAgB;EAE5B,MAAM,CAACY,kBAAkB,EAAEC,OAAO,CAAC,GAAGX,UAAU,CAACM,SAAS,EAAEC,YAAY,CAAC;EAEzE,MAAMK,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCd,6BAA6B,CAACK,OAAO,EAAEC,WAAW,EAAEK,kBAAkB,EAAEH,YAAY,EAAEE,SAAS,CAAC,CACnG;EAED,OAAO,MAAMb,yBAAyB,CAACM,UAAU,EAAEU,WAAW,EAAE,CAACT,KAAK,EAAE,GAAGQ,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}