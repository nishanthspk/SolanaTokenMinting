{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** Authority types defined by the program */\nexport var AuthorityType;\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct([u8('instruction'), u8('authorityType'), u8('newAuthorityOption'), publicKey('newAuthority')]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  const data = Buffer.alloc(setAuthorityInstructionData.span);\n  setAuthorityInstructionData.encode({\n    instruction: TokenInstruction.SetAuthority,\n    authorityType,\n    newAuthorityOption: newAuthority ? 1 : 0,\n    newAuthority: newAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  } = decodeSetAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n  programId,\n  keys: [account, currentAuthority, ...multiSigners],\n  data\n}) {\n  const {\n    instruction,\n    authorityType,\n    newAuthorityOption,\n    newAuthority\n  } = setAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data: {\n      instruction,\n      authorityType,\n      newAuthority: newAuthorityOption ? newAuthority : null\n    }\n  };\n}","map":{"version":3,"names":["struct","u8","publicKey","PublicKey","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","AuthorityType","setAuthorityInstructionData","createSetAuthorityInstruction","account","currentAuthority","authorityType","newAuthority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","SetAuthority","newAuthorityOption","decodeSetAuthorityInstruction","equals","length","decodeSetAuthorityInstructionUnchecked","decode"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/instructions/setAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** Authority types defined by the program */\nexport enum AuthorityType {\n    MintTokens = 0,\n    FreezeAccount = 1,\n    AccountOwner = 2,\n    CloseAccount = 3,\n}\n\n/** TODO: docs */\nexport interface SetAuthorityInstructionData {\n    instruction: TokenInstruction.SetAuthority;\n    authorityType: AuthorityType;\n    newAuthorityOption: 1 | 0;\n    newAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct<SetAuthorityInstructionData>([\n    u8('instruction'),\n    u8('authorityType'),\n    u8('newAuthorityOption'),\n    publicKey('newAuthority'),\n]);\n\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(\n    account: PublicKey,\n    currentAuthority: PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.SetAuthority,\n            authorityType,\n            newAuthorityOption: newAuthority ? 1 : 0,\n            newAuthority: newAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SetAuthority instruction */\nexport interface DecodedSetAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        currentAuthority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.SetAuthority;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSetAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, currentAuthority, multiSigners },\n        data,\n    } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SetAuthority instruction */\nexport interface DecodedSetAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        currentAuthority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedSetAuthorityInstructionUnchecked {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = setAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}