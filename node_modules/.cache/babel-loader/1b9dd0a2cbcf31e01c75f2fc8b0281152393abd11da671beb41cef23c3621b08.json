{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createInitializeAccountInstruction } from './../instructions/index.mjs';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from './../state/index.mjs';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.mjs';\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(connection, payer, mint, owner, keypair, confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  // If a keypair isn't provided, create the associated token account and return its address\n  if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n  // Otherwise, create the account with the provided keypair and return its public key\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeAccountInstruction","ACCOUNT_SIZE","getMinimumBalanceForRentExemptAccount","createAssociatedTokenAccount","createAccount","connection","payer","mint","owner","keypair","confirmOptions","programId","lamports","transaction","add","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/createAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeAccountInstruction } from '../instructions/index';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/index';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"],"mappings":"AAAA,SAKIA,yBAAyB,EAEzBC,aAAa,EACbC,WAAW,QACR,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,kCAAkC,QAAQ,6BAAwB;AAC3E,SAASC,YAAY,EAAEC,qCAAqC,QAAQ,sBAAiB;AACrF,SAASC,4BAA4B,QAAQ,oCAAiC;AAE9E;;;;;;;;;;;;;AAaA,OAAO,eAAeC,aAAaA,CAC/BC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,OAAiB,EACjBC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B;EACA,IAAI,CAACU,OAAO,EAAE,OAAO,MAAMN,4BAA4B,CAACE,UAAU,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEE,cAAc,EAAEC,SAAS,CAAC;EAElH;EACA,MAAMC,QAAQ,GAAG,MAAMV,qCAAqC,CAACG,UAAU,CAAC;EAExE,MAAMQ,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CACrCjB,aAAa,CAACO,aAAa,CAAC;IACxBW,UAAU,EAAET,KAAK,CAACU,SAAS;IAC3BC,gBAAgB,EAAER,OAAO,CAACO,SAAS;IACnCE,KAAK,EAAEjB,YAAY;IACnBW,QAAQ;IACRD;GACH,CAAC,EACFX,kCAAkC,CAACS,OAAO,CAACO,SAAS,EAAET,IAAI,EAAEC,KAAK,EAAEG,SAAS,CAAC,CAChF;EAED,MAAMf,yBAAyB,CAACS,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,EAAEG,OAAO,CAAC,EAAEC,cAAc,CAAC;EAE1F,OAAOD,OAAO,CAACO,SAAS;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}