{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createAssociatedTokenAccountInstruction } from './../instructions/index.mjs';\nimport { getAssociatedTokenAddress } from './../state/index.mjs';\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n  const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n  return associatedToken;\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","getAssociatedTokenAddress","createAssociatedTokenAccount","connection","payer","mint","owner","confirmOptions","programId","associatedTokenProgramId","associatedToken","transaction","add","publicKey"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/createAssociatedTokenAccount.ts"],"sourcesContent":["import { ConfirmOptions, Connection, PublicKey, sendAndConfirmTransaction, Signer, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/index';\nimport { getAssociatedTokenAddress } from '../state/index';\n\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"],"mappings":"AAAA,SAAgDA,yBAAyB,EAAUC,WAAW,QAAQ,iBAAiB;AACvH,SAASC,2BAA2B,EAAEC,gBAAgB,QAAQ,oBAAe;AAC7E,SAASC,uCAAuC,QAAQ,6BAAwB;AAChF,SAASC,yBAAyB,QAAQ,sBAAiB;AAE3D;;;;;;;;;;;;;AAaA,OAAO,eAAeC,4BAA4BA,CAC9CC,UAAsB,EACtBC,KAAa,EACbC,IAAe,EACfC,KAAgB,EAChBC,cAA+B,EAC/BC,SAAS,GAAGT,gBAAgB,EAC5BU,wBAAwB,GAAGX,2BAA2B;EAEtD,MAAMY,eAAe,GAAG,MAAMT,yBAAyB,CAACI,IAAI,EAAEC,KAAK,EAAE,KAAK,EAAEE,SAAS,EAAEC,wBAAwB,CAAC;EAEhH,MAAME,WAAW,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CACrCZ,uCAAuC,CACnCI,KAAK,CAACS,SAAS,EACfH,eAAe,EACfJ,KAAK,EACLD,IAAI,EACJG,SAAS,EACTC,wBAAwB,CAC3B,CACJ;EAED,MAAMb,yBAAyB,CAACO,UAAU,EAAEQ,WAAW,EAAE,CAACP,KAAK,CAAC,EAAEG,cAAc,CAAC;EAEjF,OAAOG,eAAe;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}