{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createApproveInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param delegate       Account authorized to transfer tokens from the account\n * @param owner          Owner of the account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approve(connection, payer, account, delegate, owner, amount, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createApproveInstruction(account, delegate, ownerPublicKey, amount, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createApproveInstruction","getSigners","approve","connection","payer","account","delegate","owner","amount","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/approve.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createApproveInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param delegate       Account authorized to transfer tokens from the account\n * @param owner          Owner of the account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approve(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createApproveInstruction(account, delegate, ownerPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AAAA,SAIIA,yBAAyB,EAEzBC,WAAW,QAER,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,wBAAwB,QAAQ,6BAAwB;AACjE,SAASC,UAAU,QAAQ,gBAAa;AAExC;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,OAAOA,CACzBC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,QAAmB,EACnBC,KAAyB,EACzBC,MAAuB,EACvBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGZ,gBAAgB;EAE5B,MAAM,CAACa,cAAc,EAAEC,OAAO,CAAC,GAAGZ,UAAU,CAACM,KAAK,EAAEE,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CACrCf,wBAAwB,CAACK,OAAO,EAAEC,QAAQ,EAAEM,cAAc,EAAEJ,MAAM,EAAEC,YAAY,EAAEE,SAAS,CAAC,CAC/F;EAED,OAAO,MAAMd,yBAAyB,CAACM,UAAU,EAAEW,WAAW,EAAE,CAACV,KAAK,EAAE,GAAGS,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}