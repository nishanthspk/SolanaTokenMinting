{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createRevokeInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function revoke(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createRevokeInstruction(account, ownerPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createRevokeInstruction","getSigners","revoke","connection","payer","account","owner","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/revoke.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createRevokeInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function revoke(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createRevokeInstruction(account, ownerPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AAAA,SAIIA,yBAAyB,EAEzBC,WAAW,QAER,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,uBAAuB,QAAQ,6BAAwB;AAChE,SAASC,UAAU,QAAQ,gBAAa;AAExC;;;;;;;;;;;;;AAaA,OAAO,eAAeC,MAAMA,CACxBC,UAAsB,EACtBC,KAAa,EACbC,OAAkB,EAClBC,KAAyB,EACzBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGV,gBAAgB;EAE5B,MAAM,CAACW,cAAc,EAAEC,OAAO,CAAC,GAAGV,UAAU,CAACK,KAAK,EAAEC,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAId,WAAW,EAAE,CAACe,GAAG,CACrCb,uBAAuB,CAACK,OAAO,EAAEK,cAAc,EAAEH,YAAY,EAAEE,SAAS,CAAC,CAC5E;EAED,OAAO,MAAMZ,yBAAyB,CAACM,UAAU,EAAES,WAAW,EAAE,CAACR,KAAK,EAAE,GAAGO,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}