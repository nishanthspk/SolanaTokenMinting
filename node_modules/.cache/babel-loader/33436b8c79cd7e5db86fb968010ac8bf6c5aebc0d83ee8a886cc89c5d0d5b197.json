{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createTransferCheckedInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferChecked(connection, payer, source, mint, destination, owner, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createTransferCheckedInstruction(source, mint, destination, ownerPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createTransferCheckedInstruction","getSigners","transferChecked","connection","payer","source","mint","destination","owner","amount","decimals","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/actions/transferChecked.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createTransferCheckedInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferChecked(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"],"mappings":"AAAA,SAIIA,yBAAyB,EAEzBC,WAAW,QAER,iBAAiB;AACxB,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SAASC,gCAAgC,QAAQ,6BAAwB;AACzE,SAASC,UAAU,QAAQ,gBAAa;AAExC;;;;;;;;;;;;;;;;;AAiBA,OAAO,eAAeC,eAAeA,CACjCC,UAAsB,EACtBC,KAAa,EACbC,MAAiB,EACjBC,IAAe,EACfC,WAAsB,EACtBC,KAAyB,EACzBC,MAAuB,EACvBC,QAAgB,EAChBC,YAAA,GAAyB,EAAE,EAC3BC,cAA+B,EAC/BC,SAAS,GAAGd,gBAAgB;EAE5B,MAAM,CAACe,cAAc,EAAEC,OAAO,CAAC,GAAGd,UAAU,CAACO,KAAK,EAAEG,YAAY,CAAC;EAEjE,MAAMK,WAAW,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CACrCjB,gCAAgC,CAC5BK,MAAM,EACNC,IAAI,EACJC,WAAW,EACXO,cAAc,EACdL,MAAM,EACNC,QAAQ,EACRC,YAAY,EACZE,SAAS,CACZ,CACJ;EAED,OAAO,MAAMhB,yBAAyB,CAACM,UAAU,EAAEa,WAAW,EAAE,CAACZ,KAAK,EAAE,GAAGW,OAAO,CAAC,EAAEH,cAAc,CAAC;AACxG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}