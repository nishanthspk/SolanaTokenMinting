{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\nexport const thawAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(account, mint, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }], authority, multiSigners);\n  const data = Buffer.alloc(thawAccountInstructionData.span);\n  thawAccountInstructionData.encode({\n    instruction: TokenInstruction.ThawAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== thawAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeThawAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.ThawAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n  // TODO: key checks?\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({\n  programId,\n  keys: [account, mint, authority, ...multiSigners],\n  data\n}) {\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data: thawAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","thawAccountInstructionData","createThawAccountInstruction","account","mint","authority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","ThawAccount","decodeThawAccountInstruction","equals","length","decodeThawAccountInstructionUnchecked","decode"],"sources":["/home/spkn/spkn1/token5/node_modules/@solana/spl-token/src/instructions/thawAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface ThawAccountInstructionData {\n    instruction: TokenInstruction.ThawAccount;\n}\n\n/** TODO: docs */\nexport const thawAccountInstructionData = struct<ThawAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createThawAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(thawAccountInstructionData.span);\n    thawAccountInstructionData.encode({ instruction: TokenInstruction.ThawAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ThawAccount instruction */\nexport interface DecodedThawAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ThawAccount;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeThawAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedThawAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== thawAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, authority, multiSigners },\n        data,\n    } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ThawAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ThawAccount instruction */\nexport interface DecodedThawAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeThawAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedThawAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: thawAccountInstructionData.decode(data),\n    };\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,EAAE,QAAQ,uBAAuB;AAClD,SAAyCC,sBAAsB,QAAQ,iBAAiB;AACxF,SAASC,gBAAgB,QAAQ,oBAAe;AAChD,SACIC,gCAAgC,EAChCC,gCAAgC,EAChCC,mCAAmC,EACnCC,gCAAgC,QAC7B,iBAAY;AACnB,SAASC,UAAU,QAAQ,gBAAa;AACxC,SAASC,gBAAgB,QAAQ,aAAU;AAO3C;AACA,OAAO,MAAMC,0BAA0B,GAAGV,MAAM,CAA6B,CAACC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;AAEjG;;;;;;;;;;;AAWA,OAAM,SAAUU,4BAA4BA,CACxCC,OAAkB,EAClBC,IAAe,EACfC,SAAoB,EACpBC,YAAA,GAAyB,EAAE,EAC3BC,SAAS,GAAGb,gBAAgB;EAE5B,MAAMc,IAAI,GAAGT,UAAU,CACnB,CACI;IAAEU,MAAM,EAAEN,OAAO;IAAEO,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAI,CAAE,EACtD;IAAEF,MAAM,EAAEL,IAAI;IAAEM,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAK,CAAE,CACvD,EACDN,SAAS,EACTC,YAAY,CACf;EAED,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAK,CAACb,0BAA0B,CAACc,IAAI,CAAC;EAC1Dd,0BAA0B,CAACe,MAAM,CAAC;IAAEC,WAAW,EAAEjB,gBAAgB,CAACkB;EAAW,CAAE,EAAEN,IAAI,CAAC;EAEtF,OAAO,IAAInB,sBAAsB,CAAC;IAAEe,IAAI;IAAED,SAAS;IAAEK;EAAI,CAAE,CAAC;AAChE;AAgBA;;;;;;;;AAQA,OAAM,SAAUO,4BAA4BA,CACxCF,WAAmC,EACnCV,SAAS,GAAGb,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACV,SAAS,CAACa,MAAM,CAACb,SAAS,CAAC,EAAE,MAAM,IAAIV,mCAAmC,EAAE;EAC7F,IAAIoB,WAAW,CAACL,IAAI,CAACS,MAAM,KAAKpB,0BAA0B,CAACc,IAAI,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EAE7G,MAAM;IACFa,IAAI,EAAE;MAAEL,OAAO;MAAEC,IAAI;MAAEC,SAAS;MAAEC;IAAY,CAAE;IAChDM;EAAI,CACP,GAAGU,qCAAqC,CAACL,WAAW,CAAC;EACtD,IAAIL,IAAI,CAACK,WAAW,KAAKjB,gBAAgB,CAACkB,WAAW,EAAE,MAAM,IAAIpB,gCAAgC,EAAE;EACnG,IAAI,CAACK,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,SAAS,EAAE,MAAM,IAAIT,gCAAgC,EAAE;EAEjF;EAEA,OAAO;IACHW,SAAS;IACTC,IAAI,EAAE;MACFL,OAAO;MACPC,IAAI;MACJC,SAAS;MACTC;KACH;IACDM;GACH;AACL;AAgBA;;;;;;;AAOA,OAAM,SAAUU,qCAAqCA,CAAC;EAClDf,SAAS;EACTC,IAAI,EAAE,CAACL,OAAO,EAAEC,IAAI,EAAEC,SAAS,EAAE,GAAGC,YAAY,CAAC;EACjDM;AAAI,CACiB;EACrB,OAAO;IACHL,SAAS;IACTC,IAAI,EAAE;MACFL,OAAO;MACPC,IAAI;MACJC,SAAS;MACTC;KACH;IACDM,IAAI,EAAEX,0BAA0B,CAACsB,MAAM,CAACX,IAAI;GAC/C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}